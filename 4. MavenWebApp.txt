//Create maven based web application 

1. We need to install Apache tomcat to run this application	
2.	
3.	Sudo –i // to go to root directory
4.	Sudo apt update && sudo upgrade –y
5.	cd /tmp
6.	wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.100/bin/apache-tomcat-9.0.100.tar.gz
7.	cd ..
8.	cd opt
9.	mkdir tomcat
10.	cd ..
11.	cd tmp
12.	tar file has to be extracted into the tomcat folder so run the below command
13.	sudo tar -xvzf apache-tomcat-9.0.100.tar.gz -C /opt/tomcat --strip-components=1
14.	cd ..
15.	cd opt/tomcat
16.	ls // we can see all files are extracted 
17.	cd conf
18.	ls // we can see server.xml use this file to change the port number from default 8080 to any number say 9090 because Jenkins is running on 8080
19.	gedit server.xml // go to line number 70 and change the portnumber to 9090  <connector port=9090…..> save
20.	we need to create tomcat users as well so add the users in tomcat-users.xml file
21.	gedit tomcat-users.xml  
22.	line 22 add  <user username="admin" password="Admin" roles="manager-gui"/> then save
23.	cd ..
24.	cd bin
25.	ls // we can startup.sh and shutdown,sh to start the tomcat and stop the tomcat 
26.	just try opening the page in browser say localhost:9090  it displays page cannot be displayed so we need to start the tomcat
27.	sh startup.sh
28.	now check in the browser, localhost:9090  tomcat web page is displayed
29.	go to manage app on the right side of the web page it will ask for username and password. Enter the user name and password what we added in the step number 22
30.	The server displays default files along with the user created files if any
31.	 Go back to terminal and type cd ..
32.	Ls // we can see webapp folder this is where we will be copying the war file generated by maven based web application


2. once apache tomcat is installed, create a web application

mvn archetype:generate -DgroupId=com.example -DartifactId=MymavenWebApp01 -DarchetypeArtifactId=maven-archetype-webapp -DinterativeMode=false


3. Add the dependency Servlet app in pom.xml -search for 
<!-- Servlet API for Java EE -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
        
4.It generates a WAR file instead of JAR file so add the plugin accordingly and we donot need plugin to start the java application plugin because it is an web appication so we write the artifactId of build plugin as <artifactId>maven-war-plugin</artifactId> 

<build>
  <plugins>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.4.0</version> <!-- Update to latest stable version -->
</plugin>
</plugins>
    <finalName>MymavenWebApp01</finalName>
  </build>
</project>  


//Entire pom.xml is as 
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>MymavenWebApp01</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>MymavenWebApp01 Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <!-- Servlet API for Java EE -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
  </dependencies>
  <build>
  <plugins>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.4.0</version> <!-- Update to latest stable version -->
</plugin>
</plugins>
    <finalName>MymavenWebApp01</finalName> <!-- create a web page with the name MymavenWebapp01, if we want some other name we can chage it -->
  </build>
</project>


//when we use the tree we can see that webapp,index.jsp and web.xml is created instead of App.java
── pom.xml
├── src
│   └── main
│       ├── resources
│       └── webapp
│           ├── index.jsp
│           └── WEB-INF
│               └── web.xml

// check the index.jsp file. It will be a simple web application by default
<html>
<body>
<h2>Hello World!</h2>
</body>
</html>


//mvn clean install

//tree 
we can see the war file inside the target folder
── target
    ├── classes
    ├── maven-archiver
    │   └── pom.properties
    ├── MymavenWebApp01
    │   ├── index.jsp
    │   ├── META-INF
    │   └── WEB-INF
    │       ├── classes
    │       └── web.xml
    └── MymavenWebApp01.war


// now copy this war file manually into apache tomcat webapps folder
goto home->other locations->computer->opt/tomcat/webapps --> paste the war file here

Or use the command as 
cp target/MyMavenWebapp01.war /opt/tomcat/webapps 


// goto browser and type
localhost:9090  
since jenkins is running on 8080, configure a different port number for tomcat while in starting itself because by default tomcat also runs on 8080 
// it displays the MyMavenWebapp.war file just click on the file displays "Hello World"


   
        
        
